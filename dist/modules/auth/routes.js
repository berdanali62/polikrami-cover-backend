"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const validation_1 = require("../../middlewares/validation");
const register_dto_1 = require("./dto/register.dto");
const login_dto_1 = require("./dto/login.dto");
const auth_controller_1 = require("./controller/auth.controller");
const asyncHandler_1 = require("../../shared/helpers/asyncHandler");
const forgot_password_dto_1 = require("./dto/forgot-password.dto");
const verify_email_dto_1 = require("./dto/verify-email.dto");
const accountLock_1 = require("../../middlewares/accountLock");
const emailVerificationRateLimit_1 = require("../../middlewares/emailVerificationRateLimit");
const passwordResetRateLimit_1 = require("../../middlewares/passwordResetRateLimit");
const router = (0, express_1.Router)();
router.post('/register', (0, validation_1.validateBody)(register_dto_1.registerSchema), (0, asyncHandler_1.asyncHandler)(auth_controller_1.registerController));
router.post('/login', (0, validation_1.validateBody)(login_dto_1.loginSchema), accountLock_1.checkAccountLock, (0, asyncHandler_1.asyncHandler)(auth_controller_1.loginController));
router.post('/refresh', (0, asyncHandler_1.asyncHandler)(auth_controller_1.refreshController));
router.post('/logout', (0, asyncHandler_1.asyncHandler)(auth_controller_1.logoutController));
router.post('/forgot-password', (0, validation_1.validateBody)(forgot_password_dto_1.forgotPasswordSchema), passwordResetRateLimit_1.passwordResetRateLimit, (0, asyncHandler_1.asyncHandler)(auth_controller_1.forgotPasswordController));
router.post('/verify-reset-code', (0, validation_1.validateBody)(forgot_password_dto_1.verifyResetCodeSchema), (0, asyncHandler_1.asyncHandler)(auth_controller_1.verifyResetCodeController));
router.post('/reset-password', (0, validation_1.validateBody)(forgot_password_dto_1.resetPasswordSchema), (0, asyncHandler_1.asyncHandler)(auth_controller_1.resetPasswordController));
router.post('/resend-verification', (0, validation_1.validateBody)(verify_email_dto_1.resendVerificationSchema), emailVerificationRateLimit_1.emailVerificationRateLimit, (0, asyncHandler_1.asyncHandler)(auth_controller_1.resendVerificationController));
router.post('/verify-email', (0, validation_1.validateBody)(verify_email_dto_1.verifyEmailSchema), (0, asyncHandler_1.asyncHandler)(auth_controller_1.verifyEmailController));
exports.default = router;
