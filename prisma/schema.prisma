// datasource & generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum ProjectStatus {
  active
  archived
  deleted
}

enum ShareLinkType {
  view
  comment
  edit
}

enum CommentStatus {
  open
  resolved
}

enum OrderStatus {
  pending
  paid
  failed
  canceled
  refunded
}

enum BillingInterval {
  month
  year
}

enum SubscriptionStatus {
  trialing
  active
  past_due
  canceled
}

// Core models
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String?
  avatarUrl       String?
  emailVerifiedAt DateTime?
  termsAcceptedAt   DateTime?
  privacyAcceptedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  projects                Project[]
  roles                   UserRole[]
  tokens                  RefreshToken[]
  verifyTokens            EmailVerificationToken[]
  resetTokens             PasswordResetToken[]
  phoneVerifyTokens       PhoneVerificationToken[]
  assets                  Asset[]
  comments                Comment[]
  profile                 UserProfile?
  subscriptions           Subscription[]
  orders                  Order[]
  invoices                Invoice[]
  notifications           Notification[]
  organizationsOwned      Organization[]           @relation("OrganizationOwner")
  organizationMemberships OrganizationMember[]
  events                  Event[]
  storageStat             StorageStat?
  projectMemberships      ProjectMember[]
  drafts                  Draft[]                  @relation("DraftOwner")
  assignedDrafts          Draft[]                  @relation("DraftAssignedDesigner")
  assignmentLogs          DraftAssignmentLog[]
  assignmentAssignments   DraftAssignmentLog[]     @relation("AssignmentAssigner")
  CreditWallet            CreditWallet[]
  CreditTransaction       CreditTransaction[]
  AiJob                   AiJob[]
  designerReviewsReceived DesignerReview[]        @relation("DesignerReviewsDesigner")
  designerReviewsGiven    DesignerReview[]        @relation("DesignerReviewsReviewer")
  addresses               Address[]
  likes                   Like[]
  returnRequests          ReturnRequest[]
}

model Project {
  id        String        @id @default(uuid())
  ownerId   String
  orgId     String?
  title     String
  status    ProjectStatus @default(active)
  meta      Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  owner        User            @relation(fields: [ownerId], references: [id])
  organization Organization?   @relation(fields: [orgId], references: [id])
  versions     DesignVersion[]
  comments     Comment[]
  shares       ShareLink[]
  invitations  Invitation[]
  events       Event[]
  members      ProjectMember[]

  @@index([ownerId, status, createdAt])
}

model DesignVersion {
  id        String   @id @default(uuid())
  projectId String
  version   Int
  label     String?
  createdBy String?
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
  pages   Page[]

  @@unique([projectId, version])
}

model Page {
  id              String  @id @default(uuid())
  designVersionId String
  name            String
  pageIndex       Int
  width           Int
  height          Int
  background      String?

  designVersion DesignVersion @relation(fields: [designVersionId], references: [id])
  layers        Layer[]

  @@unique([designVersionId, pageIndex])
}

model Layer {
  id       String  @id @default(uuid())
  pageId   String
  type     String
  zIndex   Int
  x        Float
  y        Float
  width    Float
  height   Float
  rotation Float   @default(0)
  props    Json?
  isLocked Boolean @default(false)
  isHidden Boolean @default(false)

  page     Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@index([pageId, zIndex])
}

model Template {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  description String?
  authorId    String?
  cover       Json?
  createdAt   DateTime @default(now())
  isPublished Boolean  @default(false)

  versions   TemplateVersion[]
  categories TemplateCategory[]
  tags       TemplateTag[]
  events     Event[]
}

model TemplateVersion {
  id                   String   @id @default(uuid())
  templateId           String
  version              Int
  baseProjectVersionId String?
  changelog            Json?
  createdAt            DateTime @default(now())

  template Template @relation(fields: [templateId], references: [id])
}

model Category {
  id        Int                @id @default(autoincrement())
  name      String
  slug      String             @unique
  templates TemplateCategory[]
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String
  slug      String        @unique
  templates TemplateTag[]
}

// Access & roles
model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId Int
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model RefreshToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String
  userAgent String?
  ip        String?
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@index([userId, revokedAt, createdAt])
}

model EmailVerificationToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model PhoneVerificationToken {
  id        String    @id @default(uuid())
  userId    String
  phone     String
  tokenHash String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@index([userId, phone, usedAt])
}

// Content & taxonomy relations
model TemplateCategory {
  templateId String
  categoryId Int

  template Template @relation(fields: [templateId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([templateId, categoryId])
}

model TemplateTag {
  templateId String
  tagId      Int

  template Template @relation(fields: [templateId], references: [id])
  tag      Tag      @relation(fields: [tagId], references: [id])

  @@id([templateId, tagId])
}

model Asset {
  id        String   @id @default(uuid())
  ownerId   String?
  kind      String
  path      String // relative path under uploads dir
  mimeType  String
  bytes     Int
  meta      Json?
  createdAt DateTime @default(now())

  owner User? @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
}


// Updated Comment model with rating support
model Comment {
  id            String        @id @default(uuid())
  projectId     String
  authorId      String
  body          String
  targetLayerId String?
  status        CommentStatus @default(open)
  rating        Int?          // NEW: Star rating (1-5) for customer reviews
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt // NEW: Track updates
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  layer   Layer?  @relation(fields: [targetLayerId], references: [id], onDelete: SetNull)
  
  @@index([projectId, status, createdAt])
  @@index([authorId, createdAt])
  @@index([targetLayerId])
  @@index([projectId, rating]) // NEW: For filtering by rating
}



model ShareLink {
  id                String        @id @default(uuid())
  projectId         String
  type              ShareLinkType @default(view)
  token             String        @unique
  passwordProtected Boolean       @default(false)
  passwordHash      String?
  expiresAt         DateTime?
  allowDownload     Boolean       @default(false)
  createdAt         DateTime      @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

// User profile & preferences
model UserProfile {
  userId      String  @id
  phone       String?
  phoneVerifiedAt DateTime?
  company     String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  preferences Json?
  // Artist-specific fields
  isArtist                   Boolean? 
  specialization             String?
  revenueShareAcceptedAt     DateTime?
  artistBio                  String?
  isAvailable                Boolean   @default(true)
  // Public portfolio / payment (optional)
  iban                       String?
  behanceUrl                 String?
  dribbbleUrl                String?
  linkedinUrl                String?
  websiteUrl                 String?

  user User @relation(fields: [userId], references: [id])
}

// Organizations (multi-tenant)
model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner       User                 @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members     OrganizationMember[]
  projects    Project[]
  invitations Invitation[]
  storageStat StorageStat?
}

model OrganizationMember {
  organizationId String
  userId         String
  role           String   @default("member")
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@id([organizationId, userId])
}

// Draft assignment tracking
model DraftAssignmentLog {
  id               String    @id @default(uuid())
  draftId          String
  designerId       String
  assignedBy       String
  action           String    // 'assigned', 'unassigned', 'reassigned'
  reason           String?
  previousDesignerId String?
  timestamp        DateTime  @default(now())

  draft    Draft @relation(fields: [draftId], references: [id])
  designer User  @relation(fields: [designerId], references: [id])
  assigner User  @relation("AssignmentAssigner", fields: [assignedBy], references: [id])

  @@index([draftId])
  @@index([designerId])
  @@index([timestamp])
}

// Payment callback tracking
model PaymentCallbackLog {
  id          String   @id @default(uuid())
  paymentId   String
  status      String
  amountCents Int?
  signature   String?
  timestamp   DateTime @default(now())

  payment Payment @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([timestamp])
}

model Invitation {
  id             String    @id @default(uuid())
  organizationId String?
  projectId      String?
  email          String
  role           String?
  tokenHash      String
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime  @default(now())

  organization Organization? @relation(fields: [organizationId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])

  @@index([email])
  @@index([organizationId])
  @@index([projectId])
}

// Project-level collaboration
model ProjectMember {
  projectId String
  userId    String
  role      String   @default("editor")
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

// Billing: plans, subscriptions, orders, payments, invoices
model Plan {
  id         String          @id @default(uuid())
  code       String          @unique
  name       String
  priceCents Int
  currency   String          @default("USD")
  interval   BillingInterval
  features   Json?
  createdAt  DateTime        @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id                 String             @id @default(uuid())
  userId             String
  planId             String
  status             SubscriptionStatus @default(trialing)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean            @default(false)
  providerCustomerId String?
  providerSubId      String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([planId])
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  status     OrderStatus @default(pending)
  totalCents Int
  currency   String      @default("TRY")
  cancelReason String?
  createdAt  DateTime    @default(now())

  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]
  invoice  Invoice?
  shipments Shipment[]
  returnRequests ReturnRequest[]

  @@index([userId])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([currency, status])
}

model OrderItem {
  id             String  @id @default(uuid())
  orderId        String
  type           String
  referenceId    String?
  quantity       Int     @default(1)
  unitPriceCents Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Payment {
  id                String   @id @default(uuid())
  orderId           String
  provider          String
  providerPaymentId String?
  status            String
  amountCents       Int
  receiptUrl        String?
  createdAt         DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  callbackLogs PaymentCallbackLog[]

  @@index([orderId])
}

model Invoice {
  id                String    @id @default(uuid())
  orderId           String?   @unique
  userId            String
  number            String    @unique
  amountCents       Int
  currency          String    @default("USD")
  dueDate           DateTime?
  paidAt            DateTime?
  providerInvoiceId String?
  data              Json?
  createdAt         DateTime  @default(now())

  order Order? @relation(fields: [orderId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Shipment tracking
enum ShipmentStatus {
  created
  label_created
  in_transit
  out_for_delivery
  delivered
  exception
  returned
  cancelled
}

model Shipment {
  id                  String          @id @default(uuid())
  orderId             String
  carrierCode         String
  carrierName         String?
  trackingNumber      String
  trackingToken       String?         // NEW: For public tracking verification
  externalId          String?
  status              ShipmentStatus  @default(created)
  estimatedDeliveryAt DateTime?
  lastSyncAt          DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  order  Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  events ShipmentEvent[]
  
  @@unique([carrierCode, trackingNumber])
  @@index([orderId])
  @@index([status, updatedAt])
  @@index([trackingToken]) // NEW
}
model ShipmentEvent {
  id              String   @id @default(uuid())
  shipmentId      String
  occurredAt      DateTime
  status          String
  description     String?
  location        String?
  raw             Json?
  providerEventId String?  @unique
  createdAt       DateTime @default(now())

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId, occurredAt])
}

// Notifications & Emails
model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  payload   Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model EmailQueue {
  id          String    @id @default(uuid())
  to          String
  subject     String
  template    String?
  payload     Json?
  status      String    @default("queued")
  scheduledAt DateTime?
  sentAt      DateTime?
  error       String?
  createdAt   DateTime  @default(now())

  @@index([status, scheduledAt])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([sentAt])
}

// Draft flow for multi-step customization
model Draft {
  id            String    @id @default(uuid())
  userId        String
  method        String // upload | ai | artist
  step          Int       @default(1)
  data          Json?
  messageCardId String?
  shipping      Json?
  committedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Workflow lifecycle for artist-user interaction
  workflowStatus WorkflowStatus @default(PENDING)
  revisionCount  Int            @default(0)
  maxRevisions   Int            @default(3)

  assignedDesignerId String?
  assignedDesigner   User?   @relation("DraftAssignedDesigner", fields: [assignedDesignerId], references: [id])

  // AI generation fields
  aiPromptOriginal  String?
  aiPromptFinal     String?
  aiSelectedImageId String?
  aiRegenCount      Int     @default(0)

  user           User             @relation("DraftOwner", fields: [userId], references: [id])
  messageCard    MessageCard?     @relation(fields: [messageCardId], references: [id])
  AiJob          AiJob[]
  GeneratedImage GeneratedImage[]
  assignmentLogs DraftAssignmentLog[]

  @@index([userId])
  @@index([userId, createdAt])
  @@index([committedAt])
  @@index([messageCardId])
  @@index([assignedDesignerId])
  @@index([method, createdAt])
  @@index([step, userId])
}

model MessageCard {
  id           String   @id @default(uuid())
  title        String
  thumbnailUrl String?
  priceCents   Int      @default(0)
  isPublished  Boolean  @default(true)
  createdAt    DateTime @default(now())

  drafts Draft[]
  likes  Like[]

  @@index([isPublished, createdAt])
}

// Analytics & usage
model Event {
  id         String   @id @default(uuid())
  userId     String?
  projectId  String?
  templateId String?
  type       String
  payload    Json?
  createdAt  DateTime @default(now())

  user     User?     @relation(fields: [userId], references: [id])
  project  Project?  @relation(fields: [projectId], references: [id])
  template Template? @relation(fields: [templateId], references: [id])

  @@index([type, createdAt])
  @@index([userId, createdAt])
}

// Reviews & ratings for designers
model DesignerReview {
  id         String   @id @default(uuid())
  designerId String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  designer User @relation("DesignerReviewsDesigner", fields: [designerId], references: [id], onDelete: Cascade)
  reviewer User @relation("DesignerReviewsReviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([designerId, createdAt])
  @@index([reviewerId, createdAt])
  @@unique([designerId, reviewerId])
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg" // DİKKAT: ./prisma/ERD.svg değil
  // theme = "neutral"    // opsiyonel: "forest" | "dark" | "neutral"
  // format = "svg"       // varsayılan zaten svg
}

// Storage (usage/quota)
model StorageStat {
  id          String   @id @default(uuid())
  ownerUserId String?
  ownerOrgId  String?
  usedBytes   Int      @default(0)
  updatedAt   DateTime @updatedAt

  ownerUser User?         @relation(fields: [ownerUserId], references: [id])
  ownerOrg  Organization? @relation(fields: [ownerOrgId], references: [id])

  @@unique([ownerUserId])
  @@unique([ownerOrgId])
}

// Wallet for AI credit balance per user
model CreditWallet {
  userId    String   @id
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Credit transactions ledger (gift, purchase, spend, refund)
model CreditTransaction {
  id        String   @id @default(uuid())
  userId    String
  delta     Int
  type      String
  refId     String?
  note      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

// Location hierarchy for addresses and shipping
model Province {
  id         Int      @id @default(autoincrement())
  name       String
  alpha2Code String   @unique
  towns      Town[]
  addresses  Address[] @relation("ProvinceAddresses")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name])
}

model Town {
  id         Int      @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province @relation(fields: [provinceId], references: [id])
  districts  District[]
  addresses  Address[] @relation("TownAddresses")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([provinceId, name])
  @@index([name])
}

model District {
  id        Int     @id @default(autoincrement())
  name      String
  townId    Int
  town      Town    @relation(fields: [townId], references: [id])
  quarters  Quarter[]
  addresses Address[] @relation("DistrictAddresses")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([townId, name])
  @@index([name])
}

model Quarter {
  id          Int      @id @default(autoincrement())
  name        String
  districtId  Int
  district    District @relation(fields: [districtId], references: [id])
  addresses   Address[] @relation("QuarterAddresses")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([districtId, name])
  @@index([name])
}

// User saved addresses (max N per user enforced in service)
model Address {
  id         String   @id @default(uuid())
  userId     String
  label      String?
  fullName   String?
  phone      String?
  line1      String
  line2      String?
  city       String
  districtName   String?
  postalCode String?
  country    String   @default("TR")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  // Optional normalized location relations
  provinceId Int?
  townId     Int?
  districtId Int?
  quarterId  Int?
  province   Province? @relation("ProvinceAddresses", fields: [provinceId], references: [id])
  town       Town?     @relation("TownAddresses", fields: [townId], references: [id])
  district   District? @relation("DistrictAddresses", fields: [districtId], references: [id])
  quarter    Quarter?  @relation("QuarterAddresses", fields: [quarterId], references: [id])

  @@index([userId, isDefault])
  @@index([userId, createdAt])
  @@index([provinceId, townId, districtId, quarterId])
}

// Likes for message cards (popular covers)
model Like {
  id            String   @id @default(uuid())
  userId        String
  messageCardId String
  createdAt     DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  messageCard MessageCard @relation(fields: [messageCardId], references: [id], onDelete: Cascade)

  @@unique([userId, messageCardId])
  @@index([messageCardId, createdAt])
}

// Return requests (refund flow)
enum ReturnStatus {
  requested
  approved
  rejected
  received
  refunded
  canceled
}

// Artist-user design workflow status
enum WorkflowStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  PREVIEW_SENT
  REVISION
  COMPLETED
  CANCELED
}

model ReturnRequest {
  id        String       @id @default(uuid())
  orderId   String
  userId    String
  reason    String
  status    ReturnStatus @default(requested)
  note      String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([orderId])
  @@index([status, createdAt])
}

// AI generation job record
model AiJob {
  id          String    @id @default(uuid())
  draftId     String
  userId      String
  provider    String
  params      Json?
  costCredits Int       @default(0)
  status      String    @default("queued")
  error       String?
  createdAt   DateTime  @default(now())
  finishedAt  DateTime?

  draft  Draft            @relation(fields: [draftId], references: [id], onDelete: Cascade)
  user   User             @relation(fields: [userId], references: [id])
  images GeneratedImage[]

  @@index([draftId, createdAt])
  @@index([userId, createdAt])
}

// Generated images belonging to an AI job
model GeneratedImage {
  id             String   @id @default(uuid())
  draftId        String
  jobId          String
  storageKey     String
  watermarkedUrl String
  meta           Json?
  createdAt      DateTime @default(now())

  draft Draft @relation(fields: [draftId], references: [id], onDelete: Cascade)
  job   AiJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([draftId, createdAt])
  @@index([jobId])
}
// Contact form submissions
model ContactSubmission {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  message   String
  ipAddress String?
  userAgent String?
  status    ContactStatus @default(pending)
  emailSent Boolean  @default(false)
  notes     String?  // Admin notes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([email, createdAt])
  @@index([status, createdAt])
  @@index([createdAt])
}

enum ContactStatus {
  pending
  read
  replied
  spam
  archived
}


// npx prisma migrate dev --name add_contact_submission